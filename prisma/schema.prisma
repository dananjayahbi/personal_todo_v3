generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String    @default("password123")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  projects  Project[]
  tasks     Task[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
}

model Priority {
  id        String   @id @default(cuid())
  name      String   @unique
  level     Int      @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  status      TaskStatus   @default(TODO)
  order       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  projectId   String?
  priorityId  String
  attachments Attachment[]
  comments    Comment[]
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?     @relation(fields: [projectId], references: [id])
  priority    Priority     @relation(fields: [priorityId], references: [id])
}

model Attachment {
  id           String   @id @default(cuid())
  name         String
  originalName String
  path         String
  size         Int?
  mimeType     String?
  createdAt    DateTime @default(now())
  taskId       String
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}
